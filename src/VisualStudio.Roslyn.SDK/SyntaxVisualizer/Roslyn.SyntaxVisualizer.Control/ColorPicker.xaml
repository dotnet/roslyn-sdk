<UserControl x:Class="Roslyn.SyntaxVisualizer.Control.ColorPicker"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:Roslyn.SyntaxVisualizer.Control"
             xmlns:vsfx="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:catalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
             mc:Ignorable="d" 
             x:Name="Control"
             Focusable="False"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <local:PercentConverter x:Key="PercentConverter" />

        <!-- 
            The ThemedDialogTextBoxStyleKey has an exception introduced when it's used. ErrorTemplate and ThemedDialogTextBoxStyle can be removed once the bug is fixed
            https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1198412
        -->
        <ControlTemplate x:Key="ErrorTemplate">
            <DockPanel LastChildFill="True">
                <AdornedElementPlaceholder Name="ControlWithError">
                    <Border BorderBrush="Red" BorderThickness="1" />
                </AdornedElementPlaceholder>
                <imaging:CrispImage
                                DockPanel.Dock="Right"
                                VerticalAlignment="Center"
                                Moniker="{x:Static catalog:KnownMonikers.StatusInvalid}"
                                Height="16"
                                Width="16"
                                Margin="5,0,0,0"
                                ToolTip="{Binding ElementName=ControlWithError,Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" />
            </DockPanel>
        </ControlTemplate>
        <Style TargetType="TextBox" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.TextBoxStyleKey}}" x:Key="ThemedDialogTextBoxStyle">
            <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ErrorTemplate}" />
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <DockPanel x:Name="ColorSelectorsGrid" Grid.Column="0">
            <local:SaturationBrightnessPicker 
                DockPanel.Dock="Left"
                Width="500"
                Hue="{Binding Hue, Mode=OneWay}"
                Saturation="{Binding Saturation, Mode=TwoWay}"
                Brightness="{Binding Brightness, Mode=TwoWay}" />

            <local:HuePicker 
                DockPanel.Dock="Left"
                Hue="{Binding Hue, Mode=TwoWay}" 
                Width="50"
                Margin="5, 0, 5, 0" />
        </DockPanel>
        <Grid x:Name="ColorDetailsGrd" Grid.Column="1">
            <Grid.Resources>
                <Style TargetType="Label" BasedOn="{StaticResource {x:Static vsfx:VsResourceKeys.ThemedDialogLabelStyleKey}}">
                    <Setter Property="HorizontalAlignment" Value="Right" />
                    <Setter Property="VerticalAlignment" Value="Bottom" />
                    <Setter Property="Padding" Value="0, 0, 10, 0" />
                    <Setter Property="Margin" Value="0, 5, 0, 5" />
                </Style>

                <Style TargetType="TextBox" BasedOn="{StaticResource ThemedDialogTextBoxStyle}">
                    <!-- Validation indicators have width of 16 and show on the right side, need more margin space on the right-->
                    <Setter Property="Margin" Value="0, 5, 20, 5" />
                    <Setter Property="Width" Value="100" />
                </Style>

                <Style TargetType="TextBlock">
                    <!-- TextBlock doesn't have it's own resource for binding, so instead just make sure the foreground is bound to the same as all the labels -->
                    <Setter Property="Foreground" Value="{Binding Path=Foreground, ElementName=RedLabel}" />
                    <Setter Property="Padding" Value="0, 0, 10, 0" />
                    <Setter Property="Margin" Value="0, 5, 0, 5" />
                    <Setter Property="HorizontalAlignment" Value="Left" />
                    <Setter Property="VerticalAlignment" Value="Bottom" />
                </Style>
                <Style TargetType="Rectangle">
                    <Setter Property="Height" Value="25" />
                    <Setter Property="Margin" Value="0, 5, 10, 5" />
                </Style>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <!-- Use Polite LiveSettings for values that will change so that screen readers will read off their changes, but not interrupt any current notification being read -->

            <Label Content="Red" Grid.Row="0" Grid.Column="0" x:Name="RedLabel" />
            <TextBox
                x:Name="Red"
                Text="{Binding Red}" 
                Grid.Row="0" 
                Grid.Column="1" 
                GotFocus="SelectAllText"
                AutomationProperties.Name="Red" 
                AutomationProperties.LabeledBy="{Binding ElementName=RedLabel}" 
                AutomationProperties.LiveSetting="Polite" />

            <Label Content="Green" Grid.Row="1" Grid.Column="0" x:Name="GreenLabel" />
            <TextBox 
                x:Name="Green"
                Text="{Binding Green}" 
                Grid.Row="1" 
                Grid.Column="1" 
                GotFocus="SelectAllText"
                AutomationProperties.Name="Green" 
                AutomationProperties.LabeledBy="{Binding ElementName=GreenLabel}" 
                AutomationProperties.LiveSetting="Polite" />

            <Label Content="Blue" Grid.Row="2" Grid.Column="0" x:Name="BlueLabel" />
            <TextBox 
                x:Name="Blue"
                Text="{Binding Blue}" 
                Grid.Row="2" 
                Grid.Column="1" 
                GotFocus="SelectAllText"
                AutomationProperties.Name="Blue" 
                AutomationProperties.LabeledBy="{Binding ElementName=BlueLabel}" 
                AutomationProperties.LiveSetting="Polite" />

            <Label Content="Hex" Grid.Row="3" Grid.Column="0" x:Name="HexLabel" />
            <TextBlock 
                Text="{Binding Color}" 
                Grid.Row="3" 
                Grid.Column="1" 
                Focusable="False" 
                AutomationProperties.LiveSetting="Polite" 
                AutomationProperties.LabeledBy="{Binding ElementName=HexLabel}" />

            <Label Content="Hue" Grid.Row="4" Grid.Column="0" x:Name="HueLabel"/>
            <TextBlock 
                Text="{Binding Hue, StringFormat=N2}" 
                Grid.Row="4" 
                Grid.Column="1" 
                AutomationProperties.LiveSetting="Polite" 
                AutomationProperties.LabeledBy="{Binding ElementName=HueLabel}" />

            <Label Content="Saturation" Grid.Row="5" Grid.Column="0" x:Name="SaturationLabel"/>
            <TextBlock 
                Text="{Binding Saturation, Converter={StaticResource PercentConverter}}" 
                Grid.Row="5" 
                Grid.Column="1" 
                AutomationProperties.LiveSetting="Polite" 
                AutomationProperties.LabeledBy="{Binding ElementName=SaturationLabel}" />

            <Label Content="Brightness" Grid.Row="6" Grid.Column="0" x:Name="BrightnessLabel"/>
            <TextBlock 
                Text="{Binding Brightness, Converter={StaticResource PercentConverter}}" 
                Grid.Row="6" 
                Grid.Column="1" 
                AutomationProperties.LiveSetting="Polite" 
                AutomationProperties.LabeledBy="{Binding ElementName=BrightnessLabel}" />

            <Label Content="Original Color" Grid.Row="7" Grid.Column="0" x:Name="OriginalColorLabel" />
            <Rectangle Grid.Row="7" Grid.Column="1" Focusable="False" AutomationProperties.LabeledBy="{Binding ElementName=OriginalColorLabel}">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding OriginalColor, Mode=OneWay}" />
                </Rectangle.Fill>
            </Rectangle>

            <Label Content="New Color" Grid.Row="8" Grid.Column="0" x:Name="NewColorLabel" />
            <Rectangle Grid.Row="8" Grid.Column="1" Focusable="False" AutomationProperties.LabeledBy="{Binding ElementName=NewColorLabel}" >
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding Color, Mode=OneWay}" />
                </Rectangle.Fill>
            </Rectangle>
        </Grid>
    </Grid>
</UserControl>
